import mysql.connector
from mysql.connector import MySQLConnection, Error


class MySQLHelper:
    def __init__(self, config: dict):
        self.config = config
        self.conn: MySQLConnection = None
        self.cursor = None

    def connect(self):
        if not self.conn or not self.conn.is_connected():
            try:
                self.conn = mysql.connector.connect(**self.config)
                self.cursor = self.conn.cursor(dictionary=True)
            except Error as e:
                raise RuntimeError(f"MySQL接続に失敗しました: {e}")

    def close(self):
        try:
            if self.cursor:
                self.cursor.close()
                self.cursor = None
            if self.conn:
                self.conn.close()
                self.conn = None
        except Error as e:
            raise RuntimeError(f"MySQL切断時にエラーが発生しました: {e}")

    def __enter__(self):
        self.connect()
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.close()

    def select(self, sql, params=None):
        self.connect()
        try:
            self.cursor.execute(sql, params or ())
            return self.cursor.fetchall()
        except Error as e:
            raise RuntimeError(f"SELECTクエリの実行に失敗しました: {e}")

    def execute(self, sql, params=None):
        self.connect()
        try:
            self.cursor.execute(sql, params or ())
            self.conn.commit()
            return self.cursor.rowcount
        except Error as e:
            self.conn.rollback()
            raise RuntimeError(f"クエリ実行に失敗しました（ロールバック実行）: {e}")

    def start_transaction(self):
        self.connect()
        try:
            self.conn.start_transaction()
        except Error as e:
            raise RuntimeError(f"トランザクションの開始に失敗しました: {e}")

    def commit(self):
        try:
            if self.conn:
                self.conn.commit()
        except Error as e:
            raise RuntimeError(f"コミットに失敗しました: {e}")

    def rollback(self):
        try:
            if self.conn:
                self.conn.rollback()
        except Error as e:
            raise RuntimeError(f"ロールバックに失敗しました: {e}")
