<?php
declare(strict_types=1);

const LAMBDA_PREFIX = '/xxx/';
const TIMEOUT_SEC   = 2.0;

// basepath を決定（ベタ書き）
$uri  = $_SERVER['REQUEST_URI'] ?? '/';
$path = parse_url($uri, PHP_URL_PATH) ?? '/';
$path = ltrim($path, '/');

if ($path === '') {
    $path = 'index.html';
}
if (substr($path, -1) === '/' || !preg_match('/\.[A-Za-z0-9]+$/', $path)) {
    $path = rtrim($path, '/') . '/index.html';
}

$url = LAMBDA_PREFIX . preg_replace('~[^A-Za-z0-9/_\.\-]~', '', $path);

$ctx = stream_context_create([
    'http' => [
        'method'        => 'GET',
        'timeout'       => TIMEOUT_SEC,
        'ignore_errors' => true,
    ],
]);

$html = @file_get_contents($url, false, $ctx);

// 取得結果をそのまま出力（Lambda側で空文字なら空表示）
echo $html !== false ? $html : '';






<?php
$path = ltrim(parse_url($_SERVER['REQUEST_URI'] ?? '/', PHP_URL_PATH) ?? '/', '/');
if ($path === '' || substr($path, -1) === '/' || !preg_match('/\.[A-Za-z0-9]+$/', $path)) {
    $path = rtrim($path, '/') . '/index.html';
}
$url = '/xxx/' . preg_replace('~[^A-Za-z0-9/_\.\-]~', '', $path);
echo @file_get_contents($url) ?: '';





<?php
const TIMEOUT_SEC = 2.0; // 必要に応じて変更

$path = ltrim(parse_url($_SERVER['REQUEST_URI'] ?? '/', PHP_URL_PATH) ?? '/', '/');
if ($path === '' || substr($path, -1) === '/' || !preg_match('/\.[A-Za-z0-9]+$/', $path)) {
    $path = rtrim($path, '/') . '/index.html';
}
$url = '/xxx/' . preg_replace('~[^A-Za-z0-9/_\.\-]~', '', $path);

$ctx = stream_context_create([
    'http' => [
        'method'        => 'GET',
        'timeout'       => TIMEOUT_SEC,
        'ignore_errors' => true,
    ],
]);

echo @file_get_contents($url, false, $ctx) ?: '';



ーーーーーーーーーーーーーーーーーー

$html = @file_get_contents($url, false, $ctx);

// HTTPステータスコードの取得
$status = 0;
if (isset($http_response_header[0]) &&
    preg_match('#\s(\d{3})\s#', $http_response_header[0], $m)) {
    $status = (int)$m[1];
}

// 200 の場合のみ出力
if ($status === 200 && $html !== false) {
    echo $html;
} else {
    echo '';
}


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


<?php
declare(strict_types=1);

const LAMBDA_PREFIX = '/xxx/';
const TIMEOUT_SEC   = 2.0;

// basepath を生成（ディレクトリは index.html 補完）
$path = ltrim(parse_url($_SERVER['REQUEST_URI'] ?? '/', PHP_URL_PATH) ?? '/', '/');
if ($path === '' || substr($path, -1) === '/' || !preg_match('/\.[A-Za-z0-9]+$/', $path)) {
    $path = rtrim($path, '/') . '/index.html';
}
$url = LAMBDA_PREFIX . preg_replace('~[^A-Za-z0-9/_\.\-]~', '', $path);

// HTTP取得（タイムアウト & 本文は常に受け取る）
$ctx = stream_context_create([
    'http' => [
        'method'        => 'GET',
        'timeout'       => TIMEOUT_SEC,
        'ignore_errors' => true,
        'header'        => "Accept: application/json\r\nUser-Agent: xxx\r\n",
    ],
]);

$body = @file_get_contents($url, false, $ctx);

// ステータスとContent-Typeを取得
$status = 0; $ctype = '';
if (!empty($http_response_header[0]) && preg_match('#\s(\d{3})\s#', $http_response_header[0], $m)) {
    $status = (int)$m[1];
}
foreach ($http_response_header ?? [] as $i => $line) {
    if ($i === 0) continue;
    $pos = strpos($line, ':');
    if ($pos === false) continue;
    $name = strtolower(trim(substr($line, 0, $pos)));
    $val  = strtolower(trim(substr($line, $pos + 1)));
    if ($name === 'content-type') { $ctype = $val; break; }
}

// 200 かつ JSON の場合のみパース
if ($status === 200 && $body !== false && str_starts_with($ctype, 'application/json')) {
    $json = json_decode($body, true, flags: JSON_BIGINT_AS_STRING);
    if (is_array($json) && ($json['ok'] ?? false) === true && isset($json['html']) && is_string($json['html'])) {
        echo $json['html']; // 安全にHTMLを差し込み（生成元はLambda）
        return;
    }
}

// それ以外は空
echo '';



ーーーーーーーーーーーーーーーーーーーーーーーーーーーー


<?php
declare(strict_types=1);

const LAMBDA_PREFIX = '/xxx/';
const TIMEOUT_SEC   = 2.0;
const USER_AGENT    = 'xxx/curl'; // 任意のUser-Agent文字列

// basepath を生成（ディレクトリは index.html 補完）
$path = ltrim(parse_url($_SERVER['REQUEST_URI'] ?? '/', PHP_URL_PATH) ?? '/', '/');
if ($path === '' || substr($path, -1) === '/' || !preg_match('/\.[A-Za-z0-9]+$/', $path)) {
    $path = rtrim($path, '/') . '/index.html';
}
$url = LAMBDA_PREFIX . preg_replace('~[^A-Za-z0-9/_\.\-]~', '', $path);

// cURLでアクセス
$ch = curl_init();
curl_setopt_array($ch, [
    CURLOPT_URL            => $url,
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_TIMEOUT        => TIMEOUT_SEC,
    CURLOPT_HTTPHEADER     => [
        'Accept: application/json',
        'User-Agent: ' . USER_AGENT,
    ],
]);

$body   = curl_exec($ch);
$status = curl_getinfo($ch, CURLINFO_HTTP_CODE);
$ctype  = curl_getinfo($ch, CURLINFO_CONTENT_TYPE);
$err    = curl_error($ch);
curl_close($ch);

// ステータス200 & Content-Typeがapplication/jsonの場合のみ判定
if ($status === 200 && is_string($body) && stripos($ctype, 'application/json') === 0) {
    $json = json_decode($body, true);
    if (is_array($json) && ($json['ok'] ?? false) === true && isset($json['html']) && is_string($json['html'])) {
        echo $json['html'];
        return;
    }
}

// それ以外は空表示
echo '';

