# ホスト上で
docker pull python:3.13-slim

docker run -it --rm -v $(pwd):/work python:3.13-slim bash
# コンテナ内で
apt update && apt install -y gcc libssl-dev libffi-dev build-essential
mkdir -p /work/python
pip install mysql-connector-python -t /work/python
exit

# ホストに戻って
zip -r9 mysql_connector_python_layer.zip python

--------

Cloud Shell + Dockerで mysqlclient Lambda Layer 作成手順
1. 作業ディレクトリを作る
bash

mkdir mysqlclient-layer
cd mysqlclient-layer


2. Dockerfile 作成
bash

cat <<EOF > Dockerfile
FROM amazonlinux:2

RUN yum update -y && \
    yum install -y python3.11 python3.11-devel gcc mysql-devel zip && \
    python3.11 -m ensurepip && python3.11 -m pip install --upgrade pip

RUN mkdir -p /lambda-layer/python

RUN pip3.11 install mysqlclient -t /lambda-layer/python

WORKDIR /lambda-layer
RUN zip -r9 /opt/mysqlclient-layer.zip .
EOF


3. Dockerイメージビルド
bash

docker build -t mysqlclient-layer .


4. コンテナ実行してLayer zip作成・取得
bash

docker run --rm -v $PWD:/opt mysqlclient-layer
このコマンドでカレントディレクトリに

python

mysqlclient-layer.zip
ができているはずです。

---------

例：Layer を作る手順（CloudShell やローカル共通）
bash

docker run -it --rm --entrypoint bash -v "$PWD":/var/task public.ecr.aws/lambda/python:3.13
中で以下を実行：

bash

mkdir -p python
pip install "pymysql[rsa]" -t python/
zip -r layer.zip python
exit
CloudShell 上で layer.zip を確認できます。

---------

https://www.amazontrust.com/repository/AmazonRootCA1.pem
https://www.amazontrust.com/repository/AmazonRootCA2.pem
https://www.amazontrust.com/repository/AmazonRootCA3.pem

---------

▼https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/example_serverless_connect_RDS_Lambda_section.html

import json
import os
import boto3
import pymysql

# RDS settings
proxy_host_name = os.environ['PROXY_HOST_NAME']
port = int(os.environ['PORT'])
db_name = os.environ['DB_NAME']
db_user_name = os.environ['DB_USER_NAME']
aws_region = os.environ['AWS_REGION']


# Fetch RDS Auth Token
def get_auth_token():
    client = boto3.client('rds')
    token = client.generate_db_auth_token(
        DBHostname=proxy_host_name,
        Port=port
        DBUsername=db_user_name
        Region=aws_region
    )
    return token

def lambda_handler(event, context):
    token = get_auth_token()
    try:
        connection = pymysql.connect(
            host=proxy_host_name,
            user=db_user_name,
            password=token,
            db=db_name,
            port=port,
            ssl={'ca': 'Amazon RDS'}  # Ensure you have the CA bundle for SSL connection
        )
        
        with connection.cursor() as cursor:
            cursor.execute('SELECT %s + %s AS sum', (3, 2))
            result = cursor.fetchone()

        return result
        
    except Exception as e:
        return (f"Error: {str(e)}")  # Return an error message if an exception occurs

